// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: fruits.sql

package repository

import (
	"context"
)

const insertFruit = `-- name: InsertFruit :one
INSERT INTO fruits (name, colour) VALUES (?, ?)
RETURNING id, name, colour, created_at
`

type InsertFruitParams struct {
	Name   string `json:"name"`
	Colour string `json:"colour"`
}

func (q *Queries) InsertFruit(ctx context.Context, arg InsertFruitParams) (Fruit, error) {
	row := q.db.QueryRowContext(ctx, insertFruit, arg.Name, arg.Colour)
	var i Fruit
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Colour,
		&i.CreatedAt,
	)
	return i, err
}

const listFruits = `-- name: ListFruits :many
SELECT id, name, colour, created_at FROM fruits
ORDER BY name
`

func (q *Queries) ListFruits(ctx context.Context) ([]Fruit, error) {
	rows, err := q.db.QueryContext(ctx, listFruits)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Fruit
	for rows.Next() {
		var i Fruit
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Colour,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
